06. greedy
p.183

- 현재 상태에서의 최선의 선택지가 전체 선택지 중 최선의 선택지라고 가정하는 알고리즘

핵심 이론
    1. 해 선택: 현재 상태에서 가장 최선이라고 생각되는 해를 선택
    2. 적절성 검사: 현재 선택한 해가 전체 문제의 제약 조건에 벗어나지 않는지 검사
    3. 해 검사: 현재까지 선택한 해 집합이 전체 문제를 해결할 수 있는지 검사. 해결하지 못한다면 1로 돌아가 같은 과정을 반복

링크
    https://www.acmicpc.net/problem/1715

<카드 정렬하기: 카드 정렬하기>

직접 풀이

    문제 해석
        - 카드 N개의 묶음(3이면 A묶음, B묶음, C묶음)
        - 각 묶음은 크기가 제각각임
        - 모든 카드를 비교하기 위해 두 묶음씩 우선적으로 비교하기
        - 어떤 순서로 비교하냐에 따라 그 횟수가 변함
        - 가장 횟수가 적게 비교해야함

    입출력 해석
        - 묶음 수 입력
        - 각 묶음의 카드 개수 입력
        - 가장 효율적인 비교 횟수 출력

    문제 분석
        - 서로 다른 두 묶음의 차가 가장 적게 비교해야함.
        - 카드 개수 순으로 정렬 후 수가 가장 적은 두 묶음씩 더해나가야함
        (10 + 20) + (10 + 20) + 40 결과적으로 먼저 더한 묶음이 2번 더해짐
        
        - 카드 묶음을 오름차순 정렬
        - 수학적으로 해결 가능?
        - (1) + 2 + (1 + 2) + 3 + (1 + 2 + 3) + 4 + (1 + 2 + 3 + 4) + 5
        - 1은 n - 1번 2는 n - 2번 ... 4 는 n - 3번 5 는 n - 4번
        - 가장 큰 수는 1번, 가장 작은 수는 n - 1번


        - 

결과
    첫번째 시도
    결과: 실패

    수학적으로 접근하였는데 실패함
    원인: 수학적 접근이 틀렸음. 
        - (1) + 2 + (1 + 2) + 3 + (1 + 2 + 3) + 4 + (1 + 2 + 3 + 4) + 5
        이게 아니라
        - (1) + 2 + ((1) + 2) + 3 + (((1) + 2) + (1 + 2 + 3)) + 4 + ((((1) + 2) + (1 + 2 + 3)) + (1 + 2 + 3 + 4)) + 5
        이거임



피드백



마무리

